doctype html
// tables.html, includes the gas algorithm, parsing the js files (due to errors when separating js script files), adding to table, plotting on Google Embed API's map, and using "Places" to plot nearby gas stations.
html(lang='en')
  head
    meta(charset='utf-8')
    meta(http-equiv='X-UA-Compatible', content='IE=edge')
    meta(name='viewport', content='width=device-width, initial-scale=1, shrink-to-fit=no')
    meta(name='description', content='')
    meta(name='author', content='')
    
    title Gas Algorithm
    
    
    include includes/css/core.pug

    include includes/css/custom.pug
    
    
  include includes/footer.pug

  include includes/scroll-to-top.pug

  include includes/modals/logout.pug

  include includes/js/core.pug

  include includes/js/custom.pug
    
    
    script(src=' https://code.jquery.com/jquery-1.10.2.min.js', type='text/javascript')
    script(src='https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.7.7/xlsx.core.min.js')
    script(src='https://cdnjs.cloudflare.com/ajax/libs/xls/0.7.4-a/xls.core.min.js')
    // Script file for adding to bootstrap table
    script(type='text/javascript', src='js/parse.js')
    
        
    script(src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js")
    script(src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js")
    script(type='text/javascript', src='/ajax-cross-origin/js/jquery.ajax-cross-origin.min.js')
    
    script(src='/testajaxss.js')
  body#page-top.fixed-nav.sticky-footer.bg-dark
    // Navigation
    include includes/navbar.pug
    
    .content-wrapper
      .container-fluid
        // Breadcrumbs
        ol.breadcrumb
          li.breadcrumb-item
            a(href='#') Dashboard
          li.breadcrumb-item.active Tables
        // Example DataTables Card
        // 
        p
          | To analyze gas expenditures, upload a .xlsx (Excel Workbook) of your expenses by clicking "Choose File" below.
        input#excelfile(type='file')
        input#viewfile(type='button', value='Export To Table', onclick='ExportToTable()')
        #data
        #test1(style='display: none') asdf
        #test2(style='display: none') asdf
        #test3(style='display: none') asdf
        br
        
        //
          <script src='https://maps.googleapis.com/maps/api/js?v=3.exp&key=AIzaSyDFCcHzzZgvH5aLn91I1kdvKfA1FT9ENmc'></script>
          <div style='overflow:hidden;height:400px;width:520px;'>
          <div id='gmap_canvas' style='height:400px;width:520px;'></div>
          <style>
          #gmap_canvas img {
          max-width: none !important;
          background: none !important
          }
          </style>
          </div>
          <a href='https://embedmaps.org/'>google maps html widget</a>
          <script type='text/javascript' src='https://embedmaps.com/google-maps-authorization/script.js?id=a36a21f0ca14e004e460d95709874e3ec29c478f'></script>
          <script type='text/javascript'>
          function init_map() {
          var myOptions = {
          zoom: 12,
          center: new google.maps.LatLng(40.1843574, -74.5740333),
          mapTypeId: google.maps.MapTypeId.ROADMAP
          };
          map = new google.maps.Map(document.getElementById('gmap_canvas'), myOptions);
          marker = new google.maps.Marker({
          map: map,
          position: new google.maps.LatLng(40.1843574, -74.5740333)
          });
          infowindow = new google.maps.InfoWindow({
          content: '<strong>Allentown Gas </strong><br>1650 Old York Rd<br>08501 Allentown<br>'
          });
          google.maps.event.addListener(marker, 'click', function() {
          infowindow.open(map, marker);
          });
          infowindow.open(map, marker);
          }
          google.maps.event.addDomListener(window, 'load', init_map);
          </script>
        script(src='https://maps.googleapis.com/maps/api/js?v=3.exp&key=AIzaSyDFCcHzzZgvH5aLn91I1kdvKfA1FT9ENmc')
        .content-fluid
          .row
             .col-md-5
                #map121(style='display:none;')  a 
                p
                #map11(style='overflow:hidden;height:500px;width:400px; display:none;') 
                  #map12345
                  #map(style='height:400px;width:520px;')
                    style.
                      #map img {
                      max-width: none !important;
                      background: none !important
                      }
             .col-md-1
             .col-md-5
                #map122(style='display:none;') a
                p
                #map12(style='overflow:hidden;height:500px;width:400px; display:none;') 
                  #map1234
                  #map2(style='height:400px;width:520px;')
                    style.
                      #map2 img {
                      max-width: none !important;
                      background: none !important
                      }
        script(type='text/javascript').
          var midHome = JSON.parse(sessionStorage.getItem("minPricep"));
          var midWork = JSON.parse(sessionStorage.getItem("wminPricep"));
          var a = document.getElementById('map121');
          a.innerHTML = 'The price of regular gas at the cheapest station is $'+midHome.price+', and is located at '+midHome.address+'.';
          var b = document.getElementById('map122');
          b.innerHTML = 'The price of regular gas at the cheapest station is $'+midWork.price+', and is located at '+midWork.address+'.';
          var x = document.getElementById('map12345');
          x.innerHTML = '<strong>The map below shows your route had you traveled to the cheapest gas station near your workplace.</strong>';
          var y = document.getElementById('map1234');
          y.innerHTML = '<strong>The map below shows your route had you traveled to the cheapest gas station near your workplace.</strong?';
          //will be scraped.
          var saveHome = ((3.10-midHome.price)/3.10).toFixed(2);
          var saveWork = ((3.30-midWork.price)/3.30).toFixed(2);
          if(saveHome<0) saveHome = 0.00;
          if(saveWork<0) saveWork = 0.00;
          sessionStorage.setItem('saveHome', saveHome);
          sessionStorage.setItem('saveWork', saveWork);
        br
        table#exceltablebr
        #asdf.card.mb-3(style='display:none;')
          .card-header
            i.fa.fa-table
            |  Data Table Example
          .card-body
            .table-responsive
              table#dataTable.table.table-bordered(width='100%', cellspacing='0')
                //
                  <thead>
                  <tr>
                  <th>Date</th>
                  <th>Expense</th>
                  <th>Amount</th>
                  </tr>
                  </thead>
                  <tfoot>
                  <tr>
                  <th>Date</th>
                  <th>Expense</th>
                  <th>Amount</th>
                  </tr>
                  </tfoot>
                  <tbody>
                  <tr>
                  <td>1/13/2018</td>
                  <td>Allentown Gas</td>
                  <td>$28.35</td>
                  </tr>
                  <tr>
                  <td>1/13/2018</td>
                  <td>Allentown Gas</td>
                  <td>$28.35</td>
                  </tr>
                  <tr>
                  <td>1/13/2018</td>
                  <td>Allentown Gas</td>
                  <td>$28.35</td>
                  </tr>
                  </tbody>
          .card-footer.small.text-muted Updated yesterday at 11:59 PM
        a(href='https://embedmaps.org/')
          font(size='.1') .
        script(type='text/javascript', src='https://embedmaps.com/google-maps-authorization/script.js?id=a36a21f0ca14e004e460d95709874e3ec29c478f')
        script(type='text/javascript').
          var map;
          var map2;
          var centering = {
          lat: 40.1843574,
          lng: -74.5740333
          };
          var infowindow;
          var latLongPoints = [];
          var service;
          /*var locations = ["EXXONMOBIL NEW BRUNSWI NJ", "EXXONMOBIL JERSEY CITY NJ", "ALLENTOWN GASKO RTE. 539 @ 195 ALLENTOWN NJ", "ALLENTWON GASKO ALLENTOWN   NJ"];*/
          function initMap() {
          var bounds = new google.maps.LatLngBounds();
          var locations = newloc;
          console.log("Now locations are");
          console.log(locations);
          var mapProp = {
          center: centering,
          zoom: 8,
          panControl: true,
          /*In order to show navigating control*/
          zoomControl: true,
          mapTypeControl: true,
          scaleControl: true,
          streetViewControl: true,
          /*Enable street view control*/
          overviewMapControl: true,
          rotateControl: true,
          mapTypeId: google.maps.MapTypeId.ROADMAP
          };
          var x = document.getElementById('map11');
          x.style.display = 'block';
          map = new google.maps.Map(document.getElementById('map'), mapProp);
          map.setTilt(45); /*To rotate map with an angle of 45 degree*/
          x = document.getElementById('map12');
          x.style.display = 'block';
          map2 = new google.maps.Map(document.getElementById('map2'), mapProp);
          
          var sdf = document.getElementById('asdf');
          sdf.style.display = 'block';
          
          var a = document.getElementById('map121');
          a.style.display = 'block';
          var b = document.getElementById('map122');
          b.style.display = 'block';
          
          map2.setTilt(45); /*To rotate map with an angle of 45 degree*/
          /* Draw all the expense points */
          for (i = 0; i < locations.length; i++) {
          /* Code to get Latitude and Longitude of location*/
          var locate = locations[i];
          console.log("locate" + locate);
          var geocoder = new google.maps.Geocoder();
          var address = locate;
          var points;
          var latitude;
          var longitude;
          geocoder.geocode({
          'address': address
          }, function(results, status) {
          if (status == google.maps.GeocoderStatus.OK) {
          latitude = results[0].geometry.location.lat();
          longitude = results[0].geometry.location.lng();
          points = new google.maps.LatLng(latitude, longitude);
          latLongPoints[i] = points;
          console.log(results[0]);
          console.log("Found place at" + locate + " latlong: " + latitude + " " + longitude);
          /* marker code*/
          console.log("---------------------------------------------------" + contains.call(results[0].types, 'gas_station'))
          if (contains.call(results[0].types, 'gas_station')) {
          var marker = new google.maps.Marker({
          position: points,
          map: map
          });
          var marker2 = new google.maps.Marker({
          position: points,
          map: map2
          });
          /* Info window for primary gas station marker */
          google.maps.event.addListener(marker, 'click', function() {
          service = new google.maps.places.PlacesService(map);
          console.log(results[0].place_id);
          var plrequest = {
          placeId: results[0].place_id
          };
          service.getDetails(plrequest, function(result, status) {
          if (status !== google.maps.places.PlacesServiceStatus.OK) {
          console.error(status);
          return;
          }
          infoWindow = new google.maps.InfoWindow();
          infoWindow.setContent(result.name);
          infoWindow.open(map, marker);
          });
          });
          
          google.maps.event.addListener(marker2, 'click', function() {
          service = new google.maps.places.PlacesService(map);
          console.log(results[0].place_id);
          var plrequest = {
          placeId: results[0].place_id
          };
          service.getDetails(plrequest, function(result, status) {
          if (status !== google.maps.places.PlacesServiceStatus.OK) {
          console.error(status);
          return;
          }
          infoWindow = new google.maps.InfoWindow();
          infoWindow.setContent(result.name);
          infoWindow.open(map, marker2);
          });
          });
          
          //extend the bounds to include each marker's position
          bounds.extend(marker.position);
          /* Now finding nearby gas stations
          var request = {
          location: results[0].geometry.location,
          radius: '5000',
          type: ['gas_station']
          };
          //console.log("doing search for nearby gas stations for:" + locate);
          //service = new google.maps.places.PlacesService(map);
          //service.nearbySearch(request, callback);*/
          }
          } else {
          console.log("geocoder failed for" + locate);
          }
          });
          }
          /* Draw home and work points */
          var homeAdd = sessionStorage.getItem("home_address");
          var workAdd = sessionStorage.getItem("work_address");
          var latitude1;
          var longitude1;
          var point1;
          var point2;
          console.log("Home Add is " + homeAdd + " and work Add is " + workAdd);
          var geocoder1 = new google.maps.Geocoder();
          geocoder1.geocode({
          'address': homeAdd
          }, function(results, status) {
          if (status == google.maps.GeocoderStatus.OK) {
          latitude1 = results[0].geometry.location.lat();
          longitude1 = results[0].geometry.location.lng();
          point1 = new google.maps.LatLng(latitude1, longitude1);
          var marker = new google.maps.Marker({
          position: point1,
          map: map,
          icon: {
          url: 'home.png',
          scaledSize: new google.maps.Size(50, 50)
          }
          });
          bounds.extend(marker.position);
          }
          });
          
          var geocoder2 = new google.maps.Geocoder();
          geocoder2.geocode({
          'address': workAdd
          }, function(results, status) {
          if (status == google.maps.GeocoderStatus.OK) {
          latitude1 = results[0].geometry.location.lat();
          longitude1 = results[0].geometry.location.lng();
          point2 = new google.maps.LatLng(latitude1, longitude1);
          var marker = new google.maps.Marker({
          position: point2,
          map: map,
          icon: {
          url: 'work.png',
          scaledSize: new google.maps.Size(50, 50)
          }
          });
          bounds.extend(marker.position);
          }
          });
          
          var geocoder3 = new google.maps.Geocoder();
          geocoder1.geocode({
          'address': homeAdd
          }, function(results, status) {
          if (status == google.maps.GeocoderStatus.OK) {
          latitude1 = results[0].geometry.location.lat();
          longitude1 = results[0].geometry.location.lng();
          point1 = new google.maps.LatLng(latitude1, longitude1);
          var marker = new google.maps.Marker({
          position: point1,
          map: map2,
          icon: {
          url: 'home.png',
          scaledSize: new google.maps.Size(50, 50)
          }
          });
          bounds.extend(marker.position);
          }
          });
          var geocoder4 = new google.maps.Geocoder();
          geocoder2.geocode({
          'address': workAdd
          }, function(results, status) {
          if (status == google.maps.GeocoderStatus.OK) {
          latitude1 = results[0].geometry.location.lat();
          longitude1 = results[0].geometry.location.lng();
          point2 = new google.maps.LatLng(latitude1, longitude1);
          var marker = new google.maps.Marker({
          position: point2,
          map: map2,
          icon: {
          url: 'work.png',
          scaledSize: new google.maps.Size(50, 50)
          }
          });
          bounds.extend(marker.position);
          }
          });
          
          
          /* draw route */
          var directionsService = new google.maps.DirectionsService();
          var directionsDisplay = new google.maps.DirectionsRenderer();
          //var start =  new google.maps.LatLng(latLongPoints[3]);
          // var end =  new google.maps.LatLng(latLongPoints[0]);
          //var start = new google.maps.LatLng(37.334818, -121.884886);
          // var end = new google.maps.LatLng(37.441883, -122.143019);
          var midHome = JSON.parse(sessionStorage.getItem("minPricep")).address;
          var midWork = JSON.parse(sessionStorage.getItem("wminPricep")).address;
          var end = point2;
          var start = point1;
          var waypts = [{location: midHome, stopover: true}];
          var request = {
          origin: homeAdd,
          destination: workAdd,
          waypoints: waypts,
          optimizeWaypoints: true,
          unitSystem: google.maps.UnitSystem.IMPERIAL,
          travelMode: google.maps.TravelMode.DRIVING
          };
          directionsService.route(request, function(response, status) {
          if (status == google.maps.DirectionsStatus.OK) {
          directionsDisplay.setDirections(response);
          directionsDisplay.setMap(map);
          } else {
          alert("Directions Request from " + latLongPoints[0] + " to " + latLongPoints[3] + " failed: " + status);
          }
          });
          
          /* draw route */
          var directionsService1 = new google.maps.DirectionsService();
          var directionsDisplay1 = new google.maps.DirectionsRenderer();
          //var start =  new google.maps.LatLng(latLongPoints[3]);
          // var end =  new google.maps.LatLng(latLongPoints[0]);
          //var start = new google.maps.LatLng(37.334818, -121.884886);
          // var end = new google.maps.LatLng(37.441883, -122.143019);
          var midHome = JSON.parse(sessionStorage.getItem("minPricep")).address;
          var midWork = JSON.parse(sessionStorage.getItem("wminPricep")).address;
          var end = point2;
          var start = point1;
          var waypts = [{location: midWork, stopover: true}];
          var request = {
          origin: homeAdd,
          destination: workAdd,
          waypoints: waypts,
          optimizeWaypoints: true,
          unitSystem: google.maps.UnitSystem.IMPERIAL,
          travelMode: google.maps.TravelMode.DRIVING
          };
          directionsService1.route(request, function(response, status) {
          if (status == google.maps.DirectionsStatus.OK) {
          directionsDisplay1.setDirections(response);
          directionsDisplay1.setMap(map2);
          } else {
          alert("Directions Request from " + latLongPoints[0] + " to " + latLongPoints[3] + " failed: " + status);
          }
          });
          
          
              
          }
          function callback(results, status) {
          if (status == google.maps.places.PlacesServiceStatus.OK) {
          for (var i = 0; i < results.length; i++) {
          var place = results[i];
          console.log('results of i')
          createMarker(results[i]);
          }
          }
          }
          function createMarker(place) {
          console.log("Found marker:" + place.geometry.location.lat() + ":" + place.geometry.location.lng());
          var marker = new google.maps.Marker({
          map: map,
          position: place.geometry.location,
          icon: {
          url: 'https://developers.google.com/maps/documentation/javascript/images/circle.png',
          anchor: new google.maps.Point(10, 10),
          scaledSize: new google.maps.Size(10, 17)
          }
          });
          var marker2 = new google.maps.Marker({
          map: map2,
          position: place.geometry.location,
          icon: {
          url: 'https://developers.google.com/maps/documentation/javascript/images/circle.png',
          anchor: new google.maps.Point(10, 10),
          scaledSize: new google.maps.Size(10, 17)
          }
          });
          google.maps.event.addListener(marker, 'click', function() {
          service.getDetails(place, function(result, status) {
          if (status !== google.maps.places.PlacesServiceStatus.OK) {
          console.error(status);
          return;
          }
          infoWindow.setContent(result.name);
          infoWindow.open(map, marker);
          });
          });
          google.maps.event.addListener(marker, 'click', function() {
          service.getDetails(place, function(result, status) {
          if (status !== google.maps.places.PlacesServiceStatus.OK) {
          console.error(status);
          return;
          }
          infoWindow.setContent(result.name);
          infoWindow.open(map2, marker2);
          });
          });
          }
          var contains = function(needle) {
          // Per spec, the way to identify NaN is that it is not equal to itself
          var findNaN = needle !== needle;
          var indexOf;
          if (!findNaN && typeof Array.prototype.indexOf === 'function') {
          indexOf = Array.prototype.indexOf;
          } else {
          indexOf = function(needle) {
          var i = -1,
          index = -1;
          for (i = 0; i < this.length; i++) {
          var item = this[i];
          if ((findNaN && item !== item) || item === needle) {
          index = i;
          break;
          }
          }
          return index;
          };
          }
          return indexOf.call(this, needle) > -1;
          };
        script(src='https://maps.googleapis.com/maps/api/js?key=AIzaSyDFCcHzzZgvH5aLn91I1kdvKfA1FT9ENmc&libraries=places', async='', defer='')
      // /.container-fluid
      // /.content-wrapper
      footer.sticky-footer
        .container
          .text-center
            small Copyright © Valuqo 2018
      // Scroll to Top Button
      a.scroll-to-top.rounded(href='#page-top')
        i.fa.fa-angle-up
      // Logout Modal
      #exampleModal.modal.fade(tabindex='-1', role='dialog', aria-labelledby='exampleModalLabel', aria-hidden='true')
        .modal-dialog(role='document')
          .modal-content
            .modal-header
              h5#exampleModalLabel.modal-title Ready to Leave?
              button.close(type='button', data-dismiss='modal', aria-label='Close')
                span(aria-hidden='true') ×
            .modal-body Select "Logout" below if you are ready to end your current session.
            .modal-footer
              button.btn.btn-secondary(type='button', data-dismiss='modal') Cancel
              a.btn.btn-primary(href='login.html') Logout
